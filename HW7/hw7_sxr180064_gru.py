# -*- coding: utf-8 -*-
"""HW7_SXR180064_GRU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sYmYrEaOPsq6m-VtM5xqvYs5nMcV2H3Q
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import datasets, layers, models, preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

df = pd.read_csv("./ecommerceDataset.csv", header=None)
df.columns = ['label', 'text']
df.head()

df.dropna(inplace=True)
df.drop_duplicates(inplace=True)

text = df.text
label = df.label

tokenizer = preprocessing.text.Tokenizer()
tokenizer.fit_on_texts(text)

vocab_size = len(tokenizer.word_index) + 1
vocab_size
print("the vocab size is {}".format(vocab_size))

max_length = 400

token_to_seq = tokenizer.texts_to_sequences(text)

padded_text = preprocessing.sequence.pad_sequences(token_to_seq,
                                                         truncating='post',
                                                         padding='post',
                                                         maxlen=max_length)


label = LabelEncoder().fit_transform(label)

X_train, X_test, y_train, y_test = train_test_split(padded_text, label,
                                                    test_size=0.2,
                                                    random_state=42,
                                                    shuffle=True,
                                                    stratify=label)
y_train_enc = keras.utils.to_categorical(y_train)
y_test_enc = keras.utils.to_categorical(y_test)

model = models.Sequential()
model.add(layer=layers.Embedding(input_dim=vocab_size, output_dim=128, input_length=max_length, mask_zero=True))
model.add(layer=layers.GRU(units=64, activation=tf.nn.relu))
model.add(layer=layers.BatchNormalization())
model.add(layer=layers.Dense(units=128, activation=tf.nn.relu))
model.add(layer=layers.Dense(units=128, activation=tf.nn.relu))
model.add(layer=layers.Dropout(0.2))
model.add(layer=layers.Dense(units=4, activation=tf.nn.softmax))

optimizer = keras.optimizers.Adam(learning_rate=0.001)
loss = keras.losses.CategoricalCrossentropy()

model.compile(optimizer=optimizer, loss=loss, metrics=['accuracy'])

early_stopping = keras.callbacks.EarlyStopping(patience=10)

model.summary()

history = model.fit(X_train, y_train_enc,
                    epochs=5,
                    batch_size=128,
                    validation_split=0.2,
                    callbacks=[early_stopping])

from sklearn.metrics import *

predictions = np.argmax(model.predict(X_test), axis=1)
print(classification_report(predictions, y_test))